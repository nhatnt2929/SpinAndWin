{"ast":null,"code":"import NotifyComponent from './common/popup/NotifyPopup.vue';\nexport default {\n  components: {\n    NotifyComponent\n  },\n  data() {\n    return {\n      hook: require(\"@/public/images/union.png\"),\n      segments: [{\n        prize: \"Prize one\",\n        color: \"#BC48A8\",\n        image: require(\"@/public/images/wheel-icon/crown.png\")\n      }, {\n        prize: \"Prize one\",\n        color: \"#BC2504\",\n        image: null\n      }, {\n        prize: \"\",\n        color: \"#EF5716\",\n        image: require(\"@/public/images/wheel-icon/question.png\")\n      }, {\n        prize: \"Prize one\",\n        color: \"#F1BB1C\",\n        image: null\n      }, {\n        prize: \"Prize one\",\n        color: \"#F3D147\",\n        image: require(\"@/public/images/wheel-icon/gift.png\")\n      }, {\n        prize: \"Prize one\",\n        color: \"#A9C711\",\n        image: require(\"@/public/images/wheel-icon/money.png\")\n      }, {\n        prize: \"Prize one\",\n        color: \"#32A7C4\",\n        image: null\n      },\n      // { prize: \"Prize one\", color: \"#8670B7\", image: null },\n      {\n        prize: \"Prize one\",\n        color: \"#7A49CF\",\n        image: require(\"@/public/images/wheel-icon/coin.png\")\n      }, {\n        prize: \"\",\n        color: \"#8236BE\",\n        image: require(\"@/public/images/wheel-icon/sad.png\")\n      }],\n      spinning: false,\n      isOpenPopup: false,\n      rotation: 0,\n      result: null,\n      spinsLeft: 3,\n      indexPrizeWinArr: [0, 4, 5, 7]\n    };\n  },\n  methods: {\n    spin() {\n      if (this.spinsLeft > 0 && !this.spinning) {\n        this.$emit('play-music', true);\n        this.spinning = true;\n        const baseRotation = this.rotation;\n        const spinDuration = 5000;\n        const numberOfSegments = this.segments.length;\n        const segmentAngle = 360 / numberOfSegments;\n        const randomTargetSegment = Math.floor(Math.random() * numberOfSegments);\n        const targetRotation = baseRotation + randomTargetSegment * segmentAngle;\n        const startTime = performance.now();\n        const animateSpin = timestamp => {\n          const progress = (timestamp - startTime) / spinDuration;\n          const easedProgress = 1 - Math.pow(1 - progress, 2);\n          this.rotation = baseRotation + easedProgress * (targetRotation - baseRotation) * 50;\n          if (progress < 1) {\n            requestAnimationFrame(animateSpin);\n          } else {\n            this.rotation = (this.rotation + 360) % 360;\n            const degreesPerSegment = 360 / numberOfSegments;\n            const indexTmp = Math.floor(this.rotation / degreesPerSegment);\n            const index = numberOfSegments - (indexTmp + 1);\n            this.result = index;\n            this.spinning = false;\n            this.isOpenPopup = true;\n            this.$emit('play-music', false);\n          }\n        };\n        requestAnimationFrame(animateSpin);\n        this.spinsLeft -= 1;\n      }\n    },\n    handleClosePopup() {\n      this.isOpenPopup = false;\n    }\n  }\n};","map":{"version":3,"names":["NotifyComponent","components","data","hook","require","segments","prize","color","image","spinning","isOpenPopup","rotation","result","spinsLeft","indexPrizeWinArr","methods","spin","$emit","baseRotation","spinDuration","numberOfSegments","length","segmentAngle","randomTargetSegment","Math","floor","random","targetRotation","startTime","performance","now","animateSpin","timestamp","progress","easedProgress","pow","requestAnimationFrame","degreesPerSegment","indexTmp","index","handleClosePopup"],"sources":["/Users/nhatnguyent/SpinAndWin/src/components/WheelSpinner.vue"],"sourcesContent":["<template>\r\n    <div class=\"sprinner-container\">\r\n        <div class=\"wheel-container\" :style=\"{ transform: `rotate(${rotation}deg)` }\">\r\n            <div v-for=\"(segment, index) in  segments \" :key=\"index\" class=\"wheel-segment\"\r\n                :style=\"{ backgroundColor: segment.color, transform: `rotate(${index * (360 / segments.length) + 20}deg)` }\">\r\n                <p class=\"segment-text\" :style=\"{ transform: `rotate(${-25}deg)` }\">\r\n                    {{ segment.prize }}\r\n                    \r\n                </p>\r\n                \r\n                <img v-if=\"segment.image\" class=\"segment-icon\" :class=\"{ 'custom': segment.prize == '' }\"\r\n                    :src=\"segment.image\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"play-button-container\">\r\n            <button @click=\"spin\" :disabled=\"spinning\" class=\"spin-button\">\r\n                <img src=\"@/public/images/play.png\" />\r\n            </button>\r\n        </div>\r\n        <div class=\"hook\">\r\n            <img :src=\"hook\" />\r\n        </div>\r\n        <img src=\"@/public/images/border.png\" class=\"overlay\" />\r\n        <NotifyComponent :isWin=\"indexPrizeWinArr.includes(result)\" :isOpen=\"isOpenPopup\" @close-popup=\"handleClosePopup\" />\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport NotifyComponent from './common/popup/NotifyPopup.vue';\r\nexport default {\r\n    components: { NotifyComponent },\r\n    data() {\r\n        return {\r\n            hook: require(\"@/public/images/union.png\"),\r\n            segments: [\r\n                { prize: \"Prize one\", color: \"#BC48A8\", image: require(\"@/public/images/wheel-icon/crown.png\") },\r\n                { prize: \"Prize one\", color: \"#BC2504\", image: null },\r\n                { prize: \"\", color: \"#EF5716\", image: require(\"@/public/images/wheel-icon/question.png\") },\r\n                { prize: \"Prize one\", color: \"#F1BB1C\", image: null },\r\n                { prize: \"Prize one\", color: \"#F3D147\", image: require(\"@/public/images/wheel-icon/gift.png\") },\r\n                { prize: \"Prize one\", color: \"#A9C711\", image: require(\"@/public/images/wheel-icon/money.png\") },\r\n                { prize: \"Prize one\", color: \"#32A7C4\", image: null },\r\n                // { prize: \"Prize one\", color: \"#8670B7\", image: null },\r\n                { prize: \"Prize one\", color: \"#7A49CF\", image: require(\"@/public/images/wheel-icon/coin.png\") },\r\n                { prize: \"\", color: \"#8236BE\", image: require(\"@/public/images/wheel-icon/sad.png\") },\r\n            ],\r\n            spinning: false,\r\n            isOpenPopup: false,\r\n            rotation: 0,\r\n            result: null,\r\n            spinsLeft: 3,\r\n            indexPrizeWinArr: [0, 4, 5, 7],\r\n        };\r\n    },\r\n    methods: {\r\n        spin() {\r\n            if (this.spinsLeft > 0 && !this.spinning) {\r\n                this.$emit('play-music', true)\r\n                this.spinning = true;\r\n\r\n                const baseRotation = this.rotation;\r\n                const spinDuration = 5000;\r\n                const numberOfSegments = this.segments.length;\r\n                const segmentAngle = 360 / numberOfSegments;\r\n                const randomTargetSegment = Math.floor(Math.random() * numberOfSegments);\r\n                const targetRotation = baseRotation + (randomTargetSegment * segmentAngle);\r\n\r\n                const startTime = performance.now();\r\n                \r\n                const animateSpin = (timestamp) => {\r\n                    const progress = (timestamp - startTime) / spinDuration;\r\n                    const easedProgress = 1 - Math.pow(1 - progress, 2);\r\n                    this.rotation = baseRotation + easedProgress * (targetRotation - baseRotation) * 50;\r\n                    if (progress < 1) {\r\n                        requestAnimationFrame(animateSpin);\r\n                    } else {\r\n                        this.rotation = (this.rotation + 360) % 360;\r\n                        const degreesPerSegment = 360 / numberOfSegments;\r\n                        const indexTmp = Math.floor(this.rotation / degreesPerSegment)\r\n                        const index = numberOfSegments - (indexTmp + 1)\r\n                        this.result = index;\r\n                        this.spinning = false;\r\n                        this.isOpenPopup = true;\r\n                        this.$emit('play-music', false);\r\n                    }\r\n                };\r\n                \r\n                requestAnimationFrame(animateSpin);\r\n                this.spinsLeft -= 1;\r\n                }\r\n            \r\n        },\r\n        handleClosePopup() {\r\n            this.isOpenPopup = false;\r\n        }\r\n    },\r\n};\r\n</script>\r\n  \r\n<style lang=\"scss\">\r\n@import \"@/public/scss/components/WheelSpinner.scss\";\r\n</style>\r\n  \r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}