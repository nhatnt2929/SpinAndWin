{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nimport _imports_0 from '@/public/images/play.png';\nimport _imports_1 from '@/public/images/border.png';\nconst _hoisted_1 = {\n  class: \"sprinner-container\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = {\n  class: \"play-button-container\"\n};\nconst _hoisted_4 = [\"disabled\"];\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0\n}, null, -1 /* HOISTED */);\nconst _hoisted_6 = [_hoisted_5];\nconst _hoisted_7 = {\n  class: \"hook\"\n};\nconst _hoisted_8 = [\"src\"];\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_1,\n  class: \"overlay\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NotifyComponent = _resolveComponent(\"NotifyComponent\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    class: \"wheel-container\",\n    style: _normalizeStyle({\n      transform: `rotate(${$data.rotation}deg)`\n    })\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.segments, (segment, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"wheel-segment\",\n      style: _normalizeStyle({\n        backgroundColor: segment.color,\n        transform: `rotate(${index * (360 / $data.segments.length) + 20}deg)`\n      })\n    }, [_createElementVNode(\"p\", {\n      class: \"segment-text\",\n      style: _normalizeStyle({\n        transform: `rotate(${-25}deg)`\n      })\n    }, _toDisplayString(segment.prize), 5 /* TEXT, STYLE */), segment.image ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      class: _normalizeClass([\"segment-icon\", {\n        'custom': segment.prize == ''\n      }]),\n      src: segment.image\n    }, null, 10 /* CLASS, PROPS */, _hoisted_2)) : _createCommentVNode(\"v-if\", true)], 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))], 4 /* STYLE */), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.spin && $options.spin(...args)),\n    disabled: $data.spinning,\n    class: \"spin-button\"\n  }, [..._hoisted_6], 8 /* PROPS */, _hoisted_4)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"img\", {\n    src: $data.hook\n  }, null, 8 /* PROPS */, _hoisted_8)]), _hoisted_9, _createVNode(_component_NotifyComponent, {\n    isWin: $data.indexPrizeWinArr.includes($data.result),\n    isOpen: $data.isOpenPopup,\n    onClosePopup: $options.handleClosePopup\n  }, null, 8 /* PROPS */, [\"isWin\", \"isOpen\", \"onClosePopup\"])]);\n}","map":{"version":3,"names":["_imports_0","_imports_1","class","_createElementVNode","src","_hoisted_5","_createElementBlock","_hoisted_1","style","_normalizeStyle","transform","$data","rotation","_Fragment","_renderList","segments","segment","index","key","backgroundColor","color","length","prize","image","_normalizeClass","_hoisted_3","onClick","_cache","args","$options","spin","disabled","spinning","_hoisted_7","hook","_hoisted_8","_hoisted_9","_createVNode","_component_NotifyComponent","isWin","indexPrizeWinArr","includes","result","isOpen","isOpenPopup","onClosePopup","handleClosePopup"],"sources":["/Users/nhatnguyent/SpinAndWin/src/components/WheelSpinner.vue"],"sourcesContent":["<template>\r\n    <div class=\"sprinner-container\">\r\n        <div class=\"wheel-container\" :style=\"{ transform: `rotate(${rotation}deg)` }\">\r\n            <div v-for=\"(segment, index) in  segments \" :key=\"index\" class=\"wheel-segment\"\r\n                :style=\"{ backgroundColor: segment.color, transform: `rotate(${index * (360 / segments.length) + 20}deg)` }\">\r\n                <p class=\"segment-text\" :style=\"{ transform: `rotate(${-25}deg)` }\">\r\n                    {{ segment.prize }}\r\n                    \r\n                </p>\r\n                \r\n                <img v-if=\"segment.image\" class=\"segment-icon\" :class=\"{ 'custom': segment.prize == '' }\"\r\n                    :src=\"segment.image\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"play-button-container\">\r\n            <button @click=\"spin\" :disabled=\"spinning\" class=\"spin-button\">\r\n                <img src=\"@/public/images/play.png\" />\r\n            </button>\r\n        </div>\r\n        <div class=\"hook\">\r\n            <img :src=\"hook\" />\r\n        </div>\r\n        <img src=\"@/public/images/border.png\" class=\"overlay\" />\r\n        <NotifyComponent :isWin=\"indexPrizeWinArr.includes(result)\" :isOpen=\"isOpenPopup\" @close-popup=\"handleClosePopup\" />\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport NotifyComponent from './common/popup/NotifyPopup.vue';\r\nexport default {\r\n    components: { NotifyComponent },\r\n    data() {\r\n        return {\r\n            hook: require(\"@/public/images/union.png\"),\r\n            segments: [\r\n                { prize: \"Prize one\", color: \"#BC48A8\", image: require(\"@/public/images/wheel-icon/crown.png\") },\r\n                { prize: \"Prize one\", color: \"#BC2504\", image: null },\r\n                { prize: \"\", color: \"#EF5716\", image: require(\"@/public/images/wheel-icon/question.png\") },\r\n                { prize: \"Prize one\", color: \"#F1BB1C\", image: null },\r\n                { prize: \"Prize one\", color: \"#F3D147\", image: require(\"@/public/images/wheel-icon/gift.png\") },\r\n                { prize: \"Prize one\", color: \"#A9C711\", image: require(\"@/public/images/wheel-icon/money.png\") },\r\n                { prize: \"Prize one\", color: \"#32A7C4\", image: null },\r\n                // { prize: \"Prize one\", color: \"#8670B7\", image: null },\r\n                { prize: \"Prize one\", color: \"#7A49CF\", image: require(\"@/public/images/wheel-icon/coin.png\") },\r\n                { prize: \"\", color: \"#8236BE\", image: require(\"@/public/images/wheel-icon/sad.png\") },\r\n            ],\r\n            spinning: false,\r\n            isOpenPopup: false,\r\n            rotation: 0,\r\n            result: null,\r\n            spinsLeft: 3,\r\n            indexPrizeWinArr: [0, 4, 5, 7],\r\n        };\r\n    },\r\n    methods: {\r\n        spin() {\r\n            if (this.spinsLeft > 0 && !this.spinning) {\r\n                this.$emit('play-music', true)\r\n                this.spinning = true;\r\n\r\n                const baseRotation = this.rotation;\r\n                const spinDuration = 5000;\r\n                const numberOfSegments = this.segments.length;\r\n                const segmentAngle = 360 / numberOfSegments;\r\n                const randomTargetSegment = Math.floor(Math.random() * numberOfSegments);\r\n                const targetRotation = baseRotation + (randomTargetSegment * segmentAngle);\r\n\r\n                const startTime = performance.now();\r\n                \r\n                const animateSpin = (timestamp) => {\r\n                    const progress = (timestamp - startTime) / spinDuration;\r\n                    const easedProgress = 1 - Math.pow(1 - progress, 2);\r\n                    this.rotation = baseRotation + easedProgress * (targetRotation - baseRotation) * 50;\r\n                    if (progress < 1) {\r\n                        requestAnimationFrame(animateSpin);\r\n                    } else {\r\n                        this.rotation = (this.rotation + 360) % 360;\r\n                        const degreesPerSegment = 360 / numberOfSegments;\r\n                        const indexTmp = Math.floor(this.rotation / degreesPerSegment)\r\n                        const index = numberOfSegments - (indexTmp + 1)\r\n                        this.result = index;\r\n                        this.spinning = false;\r\n                        this.isOpenPopup = true;\r\n                        this.$emit('play-music', false);\r\n                    }\r\n                };\r\n                \r\n                requestAnimationFrame(animateSpin);\r\n                this.spinsLeft -= 1;\r\n                }\r\n            \r\n        },\r\n        handleClosePopup() {\r\n            this.isOpenPopup = false;\r\n        }\r\n    },\r\n};\r\n</script>\r\n  \r\n<style lang=\"scss\">\r\n@import \"@/public/scss/components/WheelSpinner.scss\";\r\n</style>\r\n  \r\n\r\n"],"mappings":";OAgBqBA,UAA8B;OAMtCC,UAAgC;;EArBpCC,KAAK,EAAC;AAAoB;;;EAatBA,KAAK,EAAC;AAAuB;;gCAE1BC,mBAAA,CAAsC;EAAjCC,GAA8B,EAA9BJ;AAA8B;oBAAnCK,UAAsC,C;;EAGzCH,KAAK,EAAC;AAAM;;gCAGjBC,mBAAA,CAAwD;EAAnDC,GAAgC,EAAhCH,UAAgC;EAACC,KAAK,EAAC;;;;;uBArBhDI,mBAAA,CAuBM,OAvBNC,UAuBM,GAtBFJ,mBAAA,CAWM;IAXDD,KAAK,EAAC,iBAAiB;IAAEM,KAAK,EAAAC,eAAA;MAAAC,SAAA,YAAyBC,KAAA,CAAAC,QAAQ;IAAA;yBAChEN,mBAAA,CASMO,SAAA,QAAAC,WAAA,CAT2BH,KAAA,CAAAI,QAAQ,GAA5BC,OAAO,EAAEC,KAAK;yBAA3BX,mBAAA,CASM;MATuCY,GAAG,EAAED,KAAK;MAAEf,KAAK,EAAC,eAAe;MACzEM,KAAK,EAAAC,eAAA;QAAAU,eAAA,EAAqBH,OAAO,CAACI,KAAK;QAAAV,SAAA,YAAuBO,KAAK,UAAUN,KAAA,CAAAI,QAAQ,CAACM,MAAM;MAAA;QAC7FlB,mBAAA,CAGI;MAHDD,KAAK,EAAC,cAAc;MAAEM,KAAK,EAAAC,eAAA,CAAE;QAAAC,SAAA;MAAA,CAAkC;wBAC3DM,OAAO,CAACM,KAAK,yBAITN,OAAO,CAACO,KAAK,I,cAAxBjB,mBAAA,CAC2B;;MADDJ,KAAK,EAAAsB,eAAA,EAAC,cAAc;QAAA,UAAqBR,OAAO,CAACM,KAAK;MAAA;MAC3ElB,GAAG,EAAEY,OAAO,CAACO;;mDAG1BpB,mBAAA,CAIM,OAJNsB,UAIM,GAHFtB,mBAAA,CAES;IAFAuB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAC,IAAA,IAAAF,IAAA,CAAI;IAAGG,QAAQ,EAAEpB,KAAA,CAAAqB,QAAQ;IAAE9B,KAAK,EAAC;oDAIrDC,mBAAA,CAEM,OAFN8B,UAEM,GADF9B,mBAAA,CAAmB;IAAbC,GAAG,EAAEO,KAAA,CAAAuB;EAAI,wBAAAC,UAAA,E,GAEnBC,UAAwD,EACxDC,YAAA,CAAoHC,0BAAA;IAAlGC,KAAK,EAAE5B,KAAA,CAAA6B,gBAAgB,CAACC,QAAQ,CAAC9B,KAAA,CAAA+B,MAAM;IAAIC,MAAM,EAAEhC,KAAA,CAAAiC,WAAW;IAAGC,YAAW,EAAEhB,QAAA,CAAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}